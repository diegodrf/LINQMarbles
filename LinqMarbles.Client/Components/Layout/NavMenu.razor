@using System.Collections.Frozen
<MudNavGroup Title="Operators" Expanded="@true">
    <MudNavLink Match="@NavLinkMatch.All">
        <MudTextField Variant="Variant.Text" @bind-Value="_searchTerm" Placeholder="Search Operator"
                      Style="max-width: 90%"/>
    </MudNavLink>

    @foreach (var group in NavGroups)
    {
        var filteredLinks = group.Value.Where(link => link.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        if (filteredLinks.Any())
        {
            <MudNavGroup Title="@group.Key" Expanded="@true">
            @foreach (var link in filteredLinks)
            {
                <MudNavLink Href="@link">@(link.GetPathTitle())</MudNavLink>
            }
            </MudNavGroup>
        }
    }
</MudNavGroup>
<MudNavGroup Title="Info">
    <MudNavLink Href="https://github.com/linkdotnet/LINQMarbles" Target="_blank">Source code</MudNavLink>
    <MudNavLink Href="/resources">More resources</MudNavLink>
</MudNavGroup>
@code {
    private string _searchTerm = string.Empty;

    private static readonly FrozenDictionary<string, string[]> NavGroups = new Dictionary<string, string[]>
    {
        { "Aggregation", [
            RouteConstant.Aggregate, 
            RouteConstant.Average, 
            RouteConstant.Count, 
            RouteConstant.Max, 
            RouteConstant.MaxBy, 
            RouteConstant.Min, 
            RouteConstant.MinBy,
            RouteConstant.Sum] 
        },
        { "Concatenation", [ 
            RouteConstant.Concat] 
        },
        { "Element", [ 
            RouteConstant.First,
            RouteConstant.FirstOrDefault,
            RouteConstant.Last,
            RouteConstant.LastOrDefault,
            RouteConstant.Single,
            RouteConstant.SingleOrDefault] 
        },
        { "Filtering", [ 
            RouteConstant.Distinct,
            RouteConstant.Skip,
            RouteConstant.Take,
            RouteConstant.Where] 
        },
        { "Grouping", [ "GroupBy" ] },
        { "Merging", [ "GroupJoin", "Join", "Zip" ] },
        { "Order", [ "Order", "OrderDescending" ] },
        { "Projection", [ "Select", "SelectMany" ] },
        { "Quantification", [ "All", "Any", "Contains", "SequenceEqual" ] },
        { "Sequence", [ "Chunk" ] },
        { "Set", [ "Except", "Intersect", "Union" ] },
    }.ToFrozenDictionary();
}
